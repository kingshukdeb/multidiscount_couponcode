<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     default_default
 * @copyright   Copyright (c) 2013 Magento Inc. (http://www.magentocommerce.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
?>
<?php
/**
 * Attribute options control
 *
 * @see Mage_Eav_Block_Adminhtml_Attribute_Edit_Options_Abstract
 * @var $this Mage_Eav_Block_Adminhtml_Attribute_Edit_Options_Abstract
 */
?>
</tbody></table>
<?php $_optionsData = $this->getOptionsData();
if($this->getCurrentOption()=='cart_percent'){
    $display = 'block';
}else{
     $display = 'none';
    }
?>
<div class="entity-edit" id="matage-options-panel" style="display:<?php echo $display; ?>">
        <div class="hor-scroll">
            <table class="dynamic-grid" cellspacing="0"  cellpadding="0">
                	<tr id="options-table">
                    <?php //foreach ($this->getStores() as $_store): ?>
                        <th><?php echo 'From' ?></th>
                        <th><?php echo 'To' ?></th>
                        <th><?php echo 'Discount' ?></th>
                    <?php //endforeach; ?>
                        <th>
                            <?php if (!$this->getReadOnly()):?>
                                <?php echo $this->getAddNewButtonHtml() ?>
                            <?php endif;?>
                        </th>
                    </tr>
                    <?php foreach ($this->getOptionsData() as $_optionData=>$_option): //print_r($_option['from']); ?>
                    <tr class="option-row">
                        <td><input name="option[value][<?php echo $_optionData ?>][<?php echo 'from' ?>]" 
                            value="<?php echo $_option['from'] ?>" class="input-text" type="text"/></td>
                        <td><input name="option[value][<?php echo $_optionData ?>][<?php echo 'to' ?>]" 
                            value="<?php echo $_option['to'] ?>" class="input-text" type="text"/></td>
                        <td><input name="option[value][<?php echo $_optionData ?>][<?php echo 'discount' ?>]" 
                            value="<?php echo $_option['discount'] ?>" class="input-text" type="text"/></td>
                        <td class="a-left">
                            <input type="hidden" class="delete-flag" name="option[delete][<?php echo $_optionData ?>]" value="" />
                            <?php if (!$this->getReadOnly()):?>
                                <?php echo $this->getDeleteButtonHtml() ?>
                            <?php endif;?>
                        </td>
                    </tr>
                    <?php endforeach; ?>
            </table>
        </div>
        <input type="hidden" id="option-count-check" value="" />
</div>
<script type="text/javascript">
//<![CDATA[
var optionDefaultInputType = 'radio';

// IE removes quotes from element.innerHTML whenever it thinks they're not needed, which breaks html.
var templateText =
        '<tr class="option-row">'+
<?php //foreach ($this->getStores() as $_store): ?>
            '<td><input name="option[value][{{id}}][<?php echo "from" ?>]" value="{{store<?php echo "from" ?>}}" class="input-text" type="text"/><\/td>'+

            '<td><input name="option[value][{{id}}][<?php echo "to" ?>]" value="{{store<?php echo "to" ?>}}" class="input-text" type="text"/><\/td>'+

            '<td><input name="option[value][{{id}}][<?php echo "discount" ?>]" value="{{store<?php echo "discount" ?>}}" class="input-text" type="text"/><\/td>'+
<?php //endforeach; ?>
            '<td class="a-left" id="delete_button_container_{{id}}">'+
                '<input type="hidden" class="delete-flag" name="option[delete][{{id}}]" value="" />'+
                <?php if (!$this->getReadOnly()):?>
                    '<?php echo $this->getDeleteButtonHtml() ?>'+
                <?php endif;?>
            '<\/td>'+
        '<\/tr>';

var nameArr = [];
        $$('.dynamic-grid tr.option-row td input').each(
            function (index) {
               var res = index.getAttribute("name").match(/delete/i);
               if(res){
                   str = index.getAttribute("name").replace("option[delete][option_", "");
                   str = str.replace("]", "");
                   nameArr.push(parseInt(str));
               }
            }
        );
if (nameArr.length) {
  maxNumber = Math.max.apply(Math, nameArr);
} else {
  maxNumber = 0;
}

var attributeOption = {
    table : $('options-table'),
    templateSyntax : /(^|.|\r|\n)({{(\w+)}})/,
    templateText : templateText,
    itemCount : maxNumber+1,
    totalItems : 0,
    isReadOnly: <?php echo (int)$this->getReadOnly(); ?>,
    add : function(data) {
        this.template = new Template(this.templateText, this.templateSyntax);
        var isNewOption = false;
        if(!data.id){
            data = {};
            data.id  = 'option_'+this.itemCount;
            isNewOption = true;
        }
        if (!data.intype)
            data.intype = optionDefaultInputType;
        Element.insert(this.table, {after: this.template.evaluate(data)});
        if (isNewOption && !this.isReadOnly) {
            this.enableNewOptionDeleteButton(data.id);
        }
        this.bindRemoveButtons();
        this.itemCount++;
        this.totalItems++;
        this.updateItemsCountField();
    },
    remove : function(event){
        var element = $(Event.findElement(event, 'tr')); // !!! Button already
                                                               // have table parent in safari
        // Safari workaround
        element.ancestors().each(function(parentItem){
           if (parentItem.hasClassName('option-row')) {
               element = parentItem;
               throw $break;
           } else if (parentItem.hasClassName('box')) {
               throw $break;
           }
        });


        if(element){
            var elementFlags = element.getElementsByClassName('delete-flag');
            if(elementFlags[0]){
                elementFlags[0].value=1;
            }

            element.addClassName('no-display');
            element.addClassName('template');
            element.remove();
            this.totalItems--;
            this.updateItemsCountField();
        }
    },
    updateItemsCountField: function() {
        if (this.totalItems > 0) {
            $('option-count-check').value = '1';
        } else {
            $('option-count-check').value = '';
        }
    },
    enableNewOptionDeleteButton: function(id) {
        $$('#delete_button_container_' + id + ' button').each(function(button) {
            button.enable();
            button.removeClassName('disabled');
        });
    },
    bindRemoveButtons : function(){
        var buttons = $$('.delete-option');
        for(var i=0;i<buttons.length;i++){
            if(!$(buttons[i]).binded){
                $(buttons[i]).binded = true;
                Event.observe(buttons[i], 'click', this.remove.bind(this));
            }
        }
    }

}
if($('row-template')){
    $('row-template').remove();
}
attributeOption.bindRemoveButtons();

if($('add_new_option_button')){
    Event.observe('add_new_option_button', 'click', attributeOption.add.bind(attributeOption));
}
Validation.addAllThese([
    ['required-option', '<?php echo $this->__('Failed') ?>', function(v) {
        return !Validation.get('IsEmpty').test(v);
}]]);
Validation.addAllThese([
    ['required-options-count', '<?php echo $this->__('Options is required') ?>', function(v) {
        return !Validation.get('IsEmpty').test(v);
}]]);
//]]>
</script>
